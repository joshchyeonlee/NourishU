import * as React from 'react';
import { signInFunctionParams } from '../types';
/**
 * Type of the React props, that are injected to the component
 */
interface withSignInProps<T> {
    /**
     *
     * Sign in Function, that signs in the user
     *
     * @param signInConfig - @param signInConfig - Parameters to perform sign in
     * ```js
     * {
     *  auth: {
     *    token: '<jwt token>'
     *  },
     *  userState: {name: 'React User', uid: 123456},
     *  refresh: <refresh jwt token>
     * }
     * ```
     */
    signIn(signInConfig: signInFunctionParams<T>): boolean;
}
/**
 * @deprecated Higher-order components are not commonly used in
 * modern React code, use Hooks instead
 *
 * React {@link https://legacy.reactjs.org/docs/higher-order-components.html | HOC} that injects
 * the `signIn` function into the class based component props.
 *
 * Call the `signIn` function in the prop
 * to sign In and authenticate the user
 *
 * This will authenticate the user by writing the uer state into the mamory
 * Also, this will call the rx engine to store the auth into into the storage
 *
 * @example
 * Here is an example without refresh token:
 * ```jsx
 * class MyComponent extends React.Component {
 *  this.props.signIn({
 *    auth: {
 *      token: '<jwt token>'
 *    },
 *    userState: {name: 'React User', uid: 123456}
 *  })
 * }
 * export default withSignIn(MyComponent);
 * ```
 *
 * Here is an example with refresh token:
 * ```jsx
 * class MyComponent extends React.Component {
 *  this.props.signIn({
 *    auth: {
 *      token: '<jwt token>'
 *    },
 *    userState: {name: 'React User', uid: 123456},
 *    refresh: <refresh jwt token>
 *  }),
 * }
 * export default withSignIn(MyComponent);
 * ```
 *
 * @typeParam T - Type of User State Object
 *
 * @param Component - React Class based Component
 * @returns React Higher Order Component with injected `signIn` prop
 */
declare function withSignIn<T, P extends withSignInProps<T>>(Component: React.ComponentType<P>): React.FunctionComponent<P>;
export default withSignIn;
